
设计思想
	单一职责
	
	
	开闭原则
		不可修改 但能扩展
		
		举例： 规划一定范围的时间学习，不管工作多么忙都抽指定时间学习，然后其他时间处理工作或私事（两手准备）
		
	依赖倒置原则
		针对接口编程，实现可插拔（高内聚 低耦合）
		高层模块不应该依赖低层模块，2层通过接口建立联系
		
	里式替换原则 （多态）
	
	
	迪米特法则  最少知识原则
		在类的结构设计上，尽量降低成员的访问权限
		根本思想是 强调类之间的松耦合
	
	
组合或聚合 减少继承，是is-a 用继承, like-a用接口
多个类/接口 组合变成新类/接口, 新类消失里面的组成部分也消失


面向过程
    关注业务流程，然后将其划分一个个的功能模块，通过一个个的函数实现功能，最后将函数按照业务流程组合。
    弊端： 无法考虑到所有情况，业务流程改变时带来的一系列变化，不能适应其变化。

面向对象
    定义自己负责的事物，做要求它自己做的事情（清楚自己的职责）
    优点： 对象从哪里来 能干什么，然后将多个对象组合产生新的业务对象（封装使得变化可以控制）
    缺点： 使得开发变得复杂，所以演变出了一些特定的解决方案

设计模式
    通过复用已经公认的设计，我们能够在解决问题时避免前人所犯的种种错误，提高我们的思考层次。
